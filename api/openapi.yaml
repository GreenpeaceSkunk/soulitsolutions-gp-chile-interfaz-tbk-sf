openapi: 3.0.0
info:
  title: API de Greenpeace interfaz TBK SF
  description: |
    ![Greenpeace](https://soulit.io/cdn/greenpeace/logo.png)
    <br />
    <br />
    API definitions of Greenpeace interfaz TBK SF.

    Functional definitions can be found in **[this document](https://docs.google.com/document/d/1suoLkptR3byKXXlnWbzZWL_G7exgWKUGv05PHtkuJC4/edit#heading=h.a25wkkg7k22h)**.
        <br/>
    <br/>
    <br/>
    <br/>
    ![SoulIT](https://soulit.io/mbo/developed_by_soulit.png)
    <br/>
    <br/>
  version: 0.0.1
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: Inscripcion
  - name: ProcessPayments
paths:
  /inscripcion:
    post:
      tags:
        - Inscripcion
      summary: Returns token and checkout URL.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InscripcionRquest'
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /inscripcion/confirmar:
    post:
      tags:
        - Inscripcion
      summary: Returns token and checkout URL.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmarRquest'
      responses:
        200:
          description: Ok.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /processPayments:
    get:
      tags:
        - ProcessPayments
      summary: ProcessPayments.
      responses:
        200:
          description: Ok.  
components:
  schemas:
    TokenResponse:
      type: object
      required:
        - token
        - checkoutURL
      properties:
        token:
          type: string
        checkoutURL:
          type: string
    InscripcionRquest:
      type: object
      required:
        - nombre
        - apellido
      properties:
        nombre:
          type: string
        apellido:
          type: string
        rut:
          type: string
        email:
          type: string
        prefijo:
          type: string  
        telefono:
          type: string
        fechaNacimiento:
          type: string
          format: date
        region:
          type: string
        pais:
          type: string
        provincia:
          type: string
        comuna:
          type: string
        calle:
          type: string
        numero:
          type: number
        monto:
          type: number
        utmSource:
          type: string
        utmMedium:
          type: string
        utmContent:
          type: string
        utmTerm:
          type: string
        utmCampaign:
          type: string
        tipoDonacion:
          type: string
        titular:
          type: boolean
        tarjetaHabienteRut:
          type: string
        tarjetaHabienteNombre:
          type: string          
    ConfirmarRquest:
      type: object
      required:
        - transaccion
        - TBK_TOKEN
      properties:
        transaccion:
          type: string
        TBK_TOKEN:
          type: string
    AttributeType:
      type: string
      enum:
        - TEXT
        - NUMBER
        - INTEGER
        - FLOAT
        - DATE
        - DATE_TIME
        - LIST
        - LIST_MULTIPLE
        - TEXT_AREA
        - CHECKS
        - RADIO
    BaseResponse:
      required:
        - _id
        - createdAt
        - updatedAt
      properties:
        _id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Query:
      type: object
      properties:
        offset:
          type: number
          description: |
            The number of objects to skip in the results.
        limit:
          type: number
          description: |
            Maximum number of objects it will return.
        sort:
          type: object
          description: |
            Contains field and value pairs, in the following form:

            ```{ <field1>: <value1>, <field2>: <value2>, ... }```

            Specify in the sort parameter the field or fields to sort by and a value of 1 or -1 to specify an ascending or descending sort respectively.
            For example:

            *The following operation sorts the documents first by the age field in descending order and then by the posts field in ascending order.*

            ```{ age : -1, posts: 1 }```

            This sort property is based on MongoDB sorting: [https://www.mongodb.com/docs/manual/reference/method/cursor.sort](https://www.mongodb.com/docs/manual/reference/method/cursor.sort)
        filter:
          type: object
          description: |
            With this property you can filter the results.

            **Equality Condition**

            To specify equality conditions, use field value pairs, in the following form:

            ```{ <field1>: <value1>, <field2>: <value2>, ... }```

            **Conditions Using Query Operators**

            You can use the query operators to specify conditions in the following form:

            ```{ <field1>: { <operator1>: <value1> }, <field2>: { <operator2>: <value2> }, ... }```

            *The following example retrieves all objects from the inventory collection where status equals either "A" or "D":*

            ```{ status: { $in: [ "A", "D" ] } }```

            **AND conditions**

            You can specify conditions for more than one field. Implicitly, a logical AND conjunction connects the clauses.

            *The following example retrieves all documents in the inventory collection where the status equals "A" and qty is less than ($lt) 30:*

            ```{ status: "A", qty: { $lt: 30 } }```

            **OR conditions**

            Using the $or operator, you can join conditions with a logical OR conjunction.

            *The following example retrieves all documents in the collection where the status equals "A" or qty is less than ($lt) 30:*

            ```{ $or: [ { status: "A" }, { qty: { $lt: 30 } } ] }```

            **Query Operators**
            - Comparison
              - ```$eq``` Matches values that are equal to a specified value.
              - ```$gt``` Matches values that are greater than a specified value.
              - ```$gte``` Matches values that are greater than or equal to a specified value.
              - ```$in``` Matches any of the values specified in an array.
              - ```$lt``` Matches values that are less than a specified value.
              - ```$lte``` Matches values that are less than or equal to a specified value.
              - ```$ne``` Matches all values that are not equal to a specified value.
              - ```$nin``` Matches none of the values specified in an array.
            - logical
              - ```$and``` Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.
              - ```$not``` Inverts the effect of a query expression and returns documents that do not match the query expression.
              - ```$nor``` Joins query clauses with a logical NOR returns all documents that fail to match both clauses.
              - ```$or``` Joins query clauses with a logical OR returns all documents that match the conditions of either clause.
            - Element
              - ```$exists``` Matches documents that have the specified field.
              - ```$type``` Selects documents if a field is of the specified type.
            - Evaluation
              - ```$expr``` Allows use of aggregation expressions within the query language.
              - ```$jsonSchema``` Validate documents against the given JSON Schema.
              - ```$mod``` Performs a modulo operation on the value of a field and selects documents with a specified result.
              - ```$regex``` Selects documents where values match a specified regular expression.
              - ```$text``` Performs text search.
              - ```$where``` Matches documents that satisfy a JavaScript expression.
            - Geospatial
              - ```$geoIntersects``` Selects geometries that intersect with a GeoJSON geometry. The 2dsphere index supports $geoIntersects.
              - ```$geoWithin``` Selects geometries within a bounding GeoJSON geometry. The 2dsphere and 2d indexes support $geoWithin.
              - ```$near``` Returns geospatial objects in proximity to a point. Requires a geospatial index. The 2dsphere and 2d indexes support $near.
              - ```$nearSphere``` Returns geospatial objects in proximity to a point on a sphere. Requires a geospatial index. The 2dsphere and 2d indexes support $nearSphere.
            - Array
              - ```$all``` Matches arrays that contain all elements specified in the query.
              - ```$elemMatch``` Selects documents if element in the array field matches all the specified $elemMatch conditions.
              - ```$size``` Selects documents if the array field is a specified size.
            - Bitwise
              - ```$bitsAllClear``` Matches numeric or binary values in which a set of bit positions all have a value of 0.
              - ```$bitsAllSet``` Matches numeric or binary values in which a set of bit positions all have a value of 1.
              - ```$bitsAnyClear``` Matches numeric or binary values in which any bit from a set of bit positions has a value of 0.
              - ```$bitsAnySet``` Matches numeric or binary values in which any bit from a set of bit positions has a value of 1.

            This filter property is based on MongoDB query object: [https://www.mongodb.com/docs/manual/tutorial/query-documents](https://www.mongodb.com/docs/manual/tutorial/query-documents)
    Error:
      type: object
      required:
        - messages
      properties:
        messages:
          description: List of error messages.
          type: array
          items:
            type: string
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
      type: object
      required:
        - messages
      properties:
        validationErrors:
          description: Object containing a list of error messages for each given property that not pass validations.
          type: object